---------------------------------------------------------------------------------------------------------------------
---------Node and React Course by Mosh Hamedani----------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- Usefull installs for react --------


npm i {
	create-react-app ----------------- create a react application
	react-router-dom ----------------- BrowserRouter, Switch, Route, Redirect, Link, NavLink
	prop-types ----------------------- type checking in components. Component.propTypes = {...}
	lodash --------------------------- orderBy, ....
	bootstrap ------------------------ CSS framework
	font-awesome --------------------- icons
	jquery --------------------------- $
	axios ---------------------------- http requests: get, post, put, delete, async, await, Promise...
	query-string --------------------- parse parameters in url
	uuid ----------------------------- random id generator
	react-toastify ------------------- making animated toasts
}


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- npm basic commands ----------------


npm start -------------------------------- start hot server for react app
ctrl + c --------------------------------- stop node from running

npm i bootstrap -------------------------- install a package
npm un bootstrap ------------------------- unistall a package
npm i -g bootstrap ----------------------- install a package globally (not just for this application)
npm un -g bootstrap ---------------------- unistall a packaget globally


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Install Node Package ---------------


npm init ------------------------- build package.json
npm i ---------------------------- install package.json versions of node_modules
npm outdated --------------------- list of outdated packages
npm -g outdated ------------------ list of global outdated packages
npm update ----------------------- updates node packages
npm -g update -------------------- update global node packages


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Updating Node Packages -------------


npm i -g npm-check-updates
ncu -------------------- see all the outdated packages and their updates
ncu -u ----------------- upgrade package.json
npm i ------------------ update to latest version of packages


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Install devDependencies ------------


npm i jshint --save-dev --------------------------- install development dependencies that should not go in production 
							environment.

---------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- Create & Publish & Update a npm package -----


1- mkdir mypackagename ------------------- create a directory with your package name
2- cd mypackagename ---------------------- go to that directory
3- npm init --yes ------------------------ create a package.json

4- Then you add your exported functions to an index.js file
	in index.js -> module.exports.add = function(a,b) {return a+b};

5- npm adduser/login --------------------- go to npmjs.com and login or register
6- add your info

7- npm publish --------------------------- publish your package

8- install it and use it in your application (npm i mypackagename....require('./mypackagename')...)
9- version 3.14.6 => Major.Minor.Patch {Major: new version with breaking changes,
					Minor: new feature with no breaking changes, Patch: bug fixes}

10- if you changed your package and add a 'new feature' for example you can update your package as follows:

11- npm version minor -------------- it add a new minor (1.0.0 -> 1.1.0)
12- npm publish -------------------- publish new version


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Environment Variables --------------


To Use an environment variable:

	const port = process.env.PORT || 3000;
	
	app.listen(port);

- This is how you can tell if your code is running on a development, testing, staging or production machine:
	
	if(app.get('env') = 'development'){

		console.log('we are on development environment...');

	}

To set an environment variable in command line:

	set PORT = 5000

	set NODE_ENV = production


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Route & queryString Parameters -----


	app.get('/api/posts/:year/:month', (req, res) => {
	
		res.send(req.params.year);
		res.send(req.query.sortBy);
	})

-We use route parameters for essential or requaired values, and we use query string parameters for anything that is 
optional.

	app.get('/api/courses/:id', (req, res)=> {
	
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) res.status(404).send('The course with the given id was not found.');

		res.send(course);
	});


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- RestFull api using express --------

in command line:

	npm i express

in index.js:

	const express = require('express');

	const app = express();

	app.use(express.json());

	const courses = [{id:1, name: 'course1'}, {id:2, name: 'course2'}, {id:3, name: 'course3'}];

	app.get('/', (req, res) => { res.send('Hello World'); });

	app.get('/api/courses', (req, res) => { res.send(courses) } );

	app.post('/api/courses', (req, res) => { const course = { id: sth, name: req.body.name }; 
							courses.push(course); res.send(course) } );

in chrome Postman extension test the api:
	
	1- type > POST,
	2- body > row,
	3- body > type > JSON 
	4- bydy > { "name": "New Course" }
	5- Send
	6- see response request by scroll down


======================================================================================================================
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------- Handling  Http Requests ----------


	app.put('/api/courses/:id', (req, res) => { 


		// Look up the course
		// if not existing return 404 - Not found
		
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) res.status(404).send('The course with the given id was not found.');



		// Validate
		// if invalid, return 400 - Bad Request

		if ( !req.body.name && req.body.length < 3 ){ 
			
			res.status(400).send('The name is required and must be at least 3 characters.');
			
			return;
		}
		

		// Update the course
	
		course.name = req.body.name;
		
		course.sth = req.body.sth;


		
		// Return the updated course
		
		res.send(course);
	
	});


	app.delete('/api/courses/:id', (req, res) => { 


		// Look up the course
		// if not existing return 404 - Not found
		
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) return res.status(404).send('The course with the given id was not found.');
		

		// Delete the course
	
		const index = courses.indexOf(course);
		
		courses.splice( index, 1);


		
		// Return the deleted course
		
		res.send(course);
	
	});



=======================================================================================================================
-----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------- Midleware functions -------


-Every route handler function that we have is technically a middleware function.

-app.use(express.json()); ==> express.json() is a middleware function. It reads the requests and if there is a json
	object in the body of the request, it will parse the body of request into a json object, and it will set the
	req.body property.

-Express has some built in middleware functions, but we can use our own custom middleware functions that we can put at
	at the front of our request processing pipeline. So every request that we get from the server will go through 
	our middleware function. with these custom middleware functions we can perform cross cutting concerns. we can 
	do logging, authentication, authorization ...

-An express application is nothing but a bunch of middleware functions


	app.use(express.json());

	app.use(function(req,res,next){
		
		console.log('logging...');
		
		next();	
	})


	app.use(function(req,res,next){
		
		console.log('Authenticating...');
		
		next();	
	})


-We can store our middleware functions in different modules for cleaner code:


	in authenticate.js:

	
		function auth(req, res, next){
		
			console.log('Authenticating...');
		
			next();	
		})

		module.export = auth;

	
	in index.js:
		
		.
		.
		.
		
		const app = express();
		
		const auth = require('./authenticate.js');
		
		.
		.
		.
		
		app.use(auth);
		


- express.urlencoded() ==> this built-in middleware function can read 'key=sth&value=sth' that is encoded in url
	and parse it as a json object into req.body

- express.static('ppublic') ==> with this middleware we can serve static content.

- we can put all of our middleware function in a directory name 'middleware' and require them in our application.



=========================================================================================================================
-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------ Confuguration ----------------


1- create config folder in src folder.

2- create default.json & development.json & production.json & custom-environment-variables.json files.

3- install config package ==> npm i config

4- in command line:
	
	set app_password=1234

5- in development.json :

	{
		"name": "Express App",
		"mail": {
				"server": "mail-server"
			}
	}

6- in custom-environment-variables.json:
		
	{
		"mail": {
				"password": "app_password"
			}
	}		



7- use it in index.js:

	const config = require('config');

	const appname = config.get('appname');
	const mailPassword = config.get('mail.password');


========================================================================================================================
------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- Debugging ---------------


1- in command line:

	npm i debug

2- in index.js:

	const startupDebugger = require('debug')('app:startup');	
	const dbDebugger = require('debug')('app:database');

	if(app.get(env) === 'development'){
		startupDebugger('development environment ...');
	}	 

	// Database Work
	...
	
	dbDebugger('Connected to database ...');

3- to see debug messages that we set in cmd:

	set DEBUG=app:startup
	or
	set DEBUG=app:database
	or
	set DEBUG=app:*

4- to clear DEBUG variable: set DEBUG=
	

======================================================================================================================
----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- Templating Engines ----------



Generate dynamic HTML at the server and send it to the client by templating engines in nodejs.

populor templating engines:
pug, mustache, ejs ...

1- in cmd : npm i pug

2- in index.js :

	app.set('view engine', 'pug');
	app.set('views', './views'); //default

	app.get('/', (req,res) => {

		res.render('index', { title: 'My express app', message: 'Hello...' });

	})

3- create 'views' folder and create 'index.pug' file

4- in index.pug:

	html
		head
			title= title
		body
			h1= message
	

====================================================================================================================
--------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- Express Router ------------


1- We create a 'routes' directory and inside that for each route create a js file. for example routes > courses.js

2- we put all of our created apis about that route to each file.

3- in courses.js instead of 'app; object (const app = express()) we work with 'route' object:

	const express  = require('express');
	
	const router = express.Router();

     ->	router.get('/', (req, res) => { ... });

	...
		
	module.exports = router;


4- we can factor out the route url. in index.js file:

	const app = express();
	
	const courses = require('/routes/courses');

	...
	
     ->	app.use('/api/courses', courses);
	
	...



=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- Synchronous & Asynchronous --------


- Asynchronous or Non-Blocking ==> a single waiter for multiple tables: it take one order from one table and set it 
	on kitchen desk for chefs to prepare the order and without delay goes to another table and takes their order
	too.

- Synchronous ==> a waiter take one order from one table and set it on kitchen desk and waits until the order is ready
	then take the order for table one, then aftar that operation goes to table two for their order!  

example:

	setTimeout(() => { console.log('Reading a user from db ... ') },2000)


====================================================================================================================
--------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------- Callback Functions -----


- When the result of an Asynchronous operation is ready the 'Callback function' will be called with the result.

	console.log('Before');

	getUser(1, user => { 
		console.log('User', user);
	});

	console.log('After');

	function getUser(id, callback)
		setTimeout(() => { 
			console.log('Reading a user from db ... ');
			callback({ id: id, gitHubUsername: 'Mosh' });
		},2000);
	}


in the console we get:

	Before
	After
	(witing 2 second)
	Reading a user from db ...
	User { id: 1, gitHubUsername: 'Mosh' }

=======================================================================================================================
-----------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------- Promises -----------


- A Promise is an object that holds the eventual result of an asynchronous operation. When an Asychronous operation completes
	it can either result in a value or an error. A promise basically promises you that will give you the result of an 
	asynchronous operation.

- Promise States:

	- 'Pending' => initially when we create a promise object. at this point it will kik off an asynchronous 
		operation. 
		
	- 'Fulfilled' or 'Resolved' ==>  when the result is ready, the promise can either be 'Fulfilled' or 'Resolved' which 
		basically means an asynchronous operation completed successfully, so then we will have a value.

	- 'Rejected' ==> otherwise if sth go wrong during the execution of that asynchronous operation, our promise will be at the
		'Rejected' state.


- Anywhere that you have an asynchronous operation that takes a callback, you should modify that function to return a promise.

	const p = new Promise((resolve, reject) => { 
		
		// Kick off some async work

		// ...

		setTimeout( ()=>{ 

			resolve({id:1, name: 'daniel'}); // pending => resolved or fulfilled
			
			reject(new Error('some error occurred ...')); // pending => rejected
		
		 }, 2000);	
	
	});


	p
	  .then(result => console.log('Result', result)); // getting the result

	  .catch(err => console.log('Error', err.message)); // getting the error

***************************************************************************************

- Parallel Promises:

	const p1 = new Promise((resolve) => {
		
		setTimeout(()=>{
			cosole.log('Asyncronous operation 1 ...');
			resolve(1);
		},2000);
	});

	const p2 = new Promise((resolve) => {
		
		setTimeout(()=>{
			cosole.log('Asyncronous operation 2 ...');
			resolve(2);
		},2000);
	});


	Promise.all([p1, p2])
		.then(result => console.log(result))  // we get '{1, 2}'
		.catch(err => console.log('Error', err.message));

- Race Promises:

	instead of Promise.all() ==> we use Promise.race() and we get the answer based on fastest successful operation // 1


===============================================================================================================================
-------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------- Async & Await -----------


- Async & Await helps you write asynchronous code like synchronous code !


	async function getRepositoris() {
	
		try{
			const user = await getUser(1);
			const repos = await getRepos(user);
			console.log(repos);

		} catch (err) {
			console.log('Error', err.message);
		}

	}

	getRepositories();



===============================================================================================================================
===============================================================================================================================
===============================================================================================================================
-------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------- MongoDB & Mongoose -------
-------------------------------------------------------------------------------------------------------------------------------
===============================================================================================================================
===============================================================================================================================
===============================================================================================================================



- in command line:

	npm i mongoose


- To create a class we use pascal notation (first letter of first word is upercase) => const Product = ...

- To create an object we use camel notation (first letter of first word is lowercase) => const product = ...


- in api.js :

	const mongoose = require("mongoose");


	// Create a connection

	mongoose
  		.connect("mongodb://localhost/store-manager")
  		.then(() => console.log("Connected to MongoDB ..."))
  		.catch(err => console.error("Could not connect to MongoDB ..."));

	// Create a schema for our collection

	const productSchema = mongoose.Schema({

  		img: String,

  		imgs: [String],

  		proCode: Number,

  		name: String,

  		created: { type: Date, default: Date.now }

	});

	
	// Create a model of our schema

	const Course = mongoose.model('Product', productSchema);

	
	

	async function createCourse(){
		
		// Create an object instance of our model class for new document

		const course = new Course({
		
			img: 'product1.jpg',
		
			imgs: [ 'product1-img2', 'product1-img3'],

			proCode: 18654,
	
			name: 'Product #1'
		
		});

		// insert our document to our collection ih database

		const result = await course.save();

		console.log(result);

	}

	createCourse();
	



- after we created a connection to our mongoDB and created a schema of our collection, then we need to compile that into 

	a model which gives us a class, next we can create an object based on our class, and this object maps to a document

	in a mongoDB database.


- to 'query' products collection:

	
	async function getProducts(){
		
		const products = await Course
	
			.find({img:'product.jpg', name: 'Product #1'}) // filter them by specific details
					
			.limit(10)

			.sort({name: -1}) // 1 => asc,  -1 => desc

			.select({name: 1, img: 1}); // select specefic features

		console.log(products);

			
	}


- to use 'comparison operators' in query a collection in mongoDB:

	eq => (equal)

	ne => (not equal)

	gt => (greater than)

	gte => (greater than or equal to)

	lt => (less than)

	lte => (less than or equal to)

	in
	
	nin => (not in)


	example:

		const products = new Product
		
			.find({ price: { $gte: 10000, $lte: 20000 } }) // find products with a price between greater than or equal 
									// to 10000 and also less than or equal to 20000
		or
			
			.find({ price: { $in: [10000,20000,30000] } }) // find products with a price either 10000,20000 or 30000



- 'logical' query operators:

	or
	and


	example:
		
		const products = new Product

			.find()

			.or( [ { name: 'Product #1' }, { img: 'sth.jpg' } ] )


		or
			
			.and( [ { name: 'Product #1' }, { img: 'sth.jpg' } ] )





- Regular expressions:

	example:

		const products = new Product

			// name starts with 'product'

			.find( { name: /^product/i } ) // i ==> this means case insesitive. no difference between P & p


			// name ends with 'product'

			.find( { name: /product$/i } )


			// name contains 'product'

			.find( { name: /.*product.*/i } )






- Count => we can get the number of products in our collection instead of their property

	
	example: 
		
		const products = new Product

			.find()
			.count();



- Pagination => get documents for a given page

	example:

		const pageNumber = get from api request ...
		const pageSize = get from api request ...
		
		const products = await Course
	
			.find({ category: 'sth' }) 

			.skip((pageNumber - 1) * pageSize)
					
			.limit(pageSize)

			.sort({ name: 1 }) // we can rewrite this => .sort('name') and for desc order => .sort('-name')

			.select({ name: 1, img: 1 }); // we can rewrite this => .select('name img')



	
- Updating existing documents:


	method 1 => find the document and then update it


		async function updateCourse(id){

			const course = await Course.findById(id);
		
			if(!course) return;

		
			// method 1		

			course.isPublished = true;
		
			course.author = 'Daniel Daneshi'

	
			// method 2

			course.set({ 
			
				isPublished: true,

				author: 'Daniel Daneshi'
			
			})

			const result = await course.save();
		
			console.log(result);
		}



	method 2 => update the document directly


		async function updateCourse(id){

			const result = await Course.update( { _id: id }, {
				
				$set: {

					author: 'Daniel',
					isPublished: false
				}
			
			});

			console.log(result)

		}


	method 3 => update the document directly and give back the updated document

	
		
		async function updateCourse(id){

			const course = await Course.findByIdAndUpdate(id, {
				
				$set: {

					author: 'Daniel',
					isPublished: false
				}
			
			}, { new: true});

			console.log(course); 

		}





- Deleting documents:

	
	method 1 => delete the document and get deleted document

		
		async function removeCourse(id){

			const course = await Course.findByIdAndRemove(id);

			console.log(course); 

		}
	

	method 2 => delete one document and return the result



		async function removeCourse(id){

			const result = await Course.deleteOne({ _id: id });

			console.log(result); 

		}



	method 3 => delete many document and return the result



		async function removeCourse(category){

			const result = await Course.deleteMany({ category: category });

			console.log(result); 

		}








===================================================================================================================================
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------



