---------------------------------------------------------------------------------------------------------------------
---------Node and React Course by Mosh Hamedani----------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- Usefull installs for react --------


npm i {
	create-react-app ----------------- create a react application
	react-router-dom ----------------- BrowserRouter, Switch, Route, Redirect, Link, NavLink
	prop-types ----------------------- type checking in components. Component.propTypes = {...}
	lodash --------------------------- orderBy, ....
	bootstrap ------------------------ CSS framework
	font-awesome --------------------- icons
	jquery --------------------------- $
	axios ---------------------------- http requests: get, post, put, delete, async, await, Promise...
	query-string --------------------- parse parameters in url
	uuid ----------------------------- random id generator
	react-toastify ------------------- making animated toasts
}


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- npm basic commands ----------------


npm start -------------------------------- start hot server for react app
ctrl + c --------------------------------- stop node from running

npm i bootstrap -------------------------- install a package
npm un bootstrap ------------------------- unistall a package
npm i -g bootstrap ----------------------- install a package globally (not just for this application)
npm un -g bootstrap ---------------------- unistall a packaget globally


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Install Node Package ---------------


npm init ------------------------- build package.json
npm i ---------------------------- install package.json versions of node_modules
npm outdated --------------------- list of outdated packages
npm -g outdated ------------------ list of global outdated packages
npm update ----------------------- updates node packages
npm -g update -------------------- update global node packages


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Updating Node Packages -------------


npm i -g npm-check-updates
ncu -------------------- see all the outdated packages and their updates
ncu -u ----------------- upgrade package.json
npm i ------------------ update to latest version of packages


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Install devDependencies ------------


npm i jshint --save-dev --------------------------- install development dependencies that should not go in production 
							environment.

---------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------- Create & Publish & Update a npm package -----


1- mkdir mypackagename ------------------- create a directory with your package name
2- cd mypackagename ---------------------- go to that directory
3- npm init --yes ------------------------ create a package.json

4- Then you add your exported functions to an index.js file
	in index.js -> module.exports.add = function(a,b) {return a+b};

5- npm adduser/login --------------------- go to npmjs.com and login or register
6- add your info

7- npm publish --------------------------- publish your package

8- install it and use it in your application (npm i mypackagename....require('./mypackagename')...)
9- version 3.14.6 => Major.Minor.Patch {Major: new version with breaking changes,
					Minor: new feature with no breaking changes, Patch: bug fixes}

10- if you changed your package and add a 'new feature' for example you can update your package as follows:

11- npm version minor -------------- it add a new minor (1.0.0 -> 1.1.0)
12- npm publish -------------------- publish new version


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Environment Variables --------------


To Use an environment variable:

	const port = process.env.PORT || 3000;
	
	app.listen(port);

- This is how you can tell if your code is running on a development, testing, staging or production machine:
	
	if(app.get('env') = 'development'){

		console.log('we are on development environment...');

	}

To set an environment variable in command line:

	set PORT = 5000

	set NODE_ENV = production


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------- Route & queryString Parameters -----


	app.get('/api/posts/:year/:month', (req, res) => {
	
		res.send(req.params.year);
		res.send(req.query.sortBy);
	})

-We use route parameters for essential or requaired values, and we use query string parameters for anything that is 
optional.

	app.get('/api/courses/:id', (req, res)=> {
	
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) res.status(404).send('The course with the given id was not found.');

		res.send(course);
	});


=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------- RestFull api using express --------

in command line:

	npm i express

in index.js:

	const express = require('express');

	const app = express();

	app.use(express.json());

	const courses = [{id:1, name: 'course1'}, {id:2, name: 'course2'}, {id:3, name: 'course3'}];

	app.get('/', (req, res) => { res.send('Hello World'); });

	app.get('/api/courses', (req, res) => { res.send(courses) } );

	app.post('/api/courses', (req, res) => { const course = { id: sth, name: req.body.name }; 
							courses.push(course); res.send(course) } );

in chrome Postman extension test the api:
	
	1- type > POST,
	2- body > row,
	3- body > type > JSON 
	4- bydy > { "name": "New Course" }
	5- Send
	6- see response request by scroll down


======================================================================================================================
----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------- Handling  Http Requests ----------


	app.put('/api/courses/:id', (req, res) => { 


		// Look up the course
		// if not existing return 404 - Not found
		
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) res.status(404).send('The course with the given id was not found.');



		// Validate
		// if invalid, return 400 - Bad Request

		if ( !req.body.name && req.body.length < 3 ){ 
			
			res.status(400).send('The name is required and must be at least 3 characters.');
			
			return;
		}
		

		// Update the course
	
		course.name = req.body.name;
		
		course.sth = req.body.sth;


		
		// Return the updated course
		
		res.send(course);
	
	});


	app.delete('/api/courses/:id', (req, res) => { 


		// Look up the course
		// if not existing return 404 - Not found
		
		const course = courses.find(c => c.id === parseInt(req.params.id));

		if(!course) return res.status(404).send('The course with the given id was not found.');
		

		// Delete the course
	
		const index = courses.indexOf(course);
		
		courses.splice( index, 1);


		
		// Return the deleted course
		
		res.send(course);
	
	});



=======================================================================================================================
-----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------- Midleware functions -------


-Every route handler function that we have is technically a middleware function.

-app.use(express.json()); ==> express.json() is a middleware function. It reads the requests and if there is a json
	object in the body of the request, it will parse the body of request into a json object, and it will set the
	req.body property.

-Express has some built in middleware functions, but we can use our own custom middleware functions that we can put at
	at the front of our request processing pipeline. So every request that we get from the server will go through 
	our middleware function. with these custom middleware functions we can perform cross cutting concerns. we can 
	do logging, authentication, authorization ...

-An express application is nothing but a bunch of middleware functions


	app.use(express.json());

	app.use(function(req,res,next){
		
		console.log('logging...');
		
		next();	
	})


	app.use(function(req,res,next){
		
		console.log('Authenticating...');
		
		next();	
	})


-We can store our middleware functions in different modules for cleaner code:


	in authenticate.js:

	
		function auth(req, res, next){
		
			console.log('Authenticating...');
		
			next();	
		})

		module.export = auth;

	
	in index.js:
		
		.
		.
		.
		
		const app = express();
		
		const auth = require('./authenticate.js');
		
		.
		.
		.
		
		app.use(auth);
		


- express.urlencoded() ==> this built-in middleware function can read 'key=sth&value=sth' that is encoded in url
	and parse it as a json object into req.body

- express.static('ppublic') ==> with this middleware we can serve static content.

- we can put all of our middleware function in a directory name 'middleware' and require them in our application.



=========================================================================================================================
-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------ Confuguration ----------------


1- create config folder in src folder.

2- create default.json & development.json & production.json & custom-environment-variables.json files.

3- install config package ==> npm i config

4- in command line:
	
	set app_password=1234

5- in development.json :

	{
		"name": "Express App",
		"mail": {
				"server": "mail-server"
			}
	}

6- in custom-environment-variables.json:
		
	{
		"mail": {
				"password": "app_password"
			}
	}		



7- use it in index.js:

	const config = require('config');

	const appname = config.get('appname');
	const mailPassword = config.get('mail.password');


========================================================================================================================
------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------- Debugging ---------------


1- in command line:

	npm i debug

2- in index.js:

	const startupDebugger = require('debug')('app:startup');	
	const dbDebugger = require('debug')('app:database');

	if(app.get(env) === 'development'){
		startupDebugger('development environment ...');
	}	 

	// Database Work
	...
	
	dbDebugger('Connected to database ...');

3- to see debug messages that we set in cmd:

	set DEBUG=app:startup
	or
	set DEBUG=app:database
	or
	set DEBUG=app:*

4- to clear DEBUG variable: set DEBUG=
	

======================================================================================================================
----------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- Templating Engines ----------



Generate dynamic HTML at the server and send it to the client by templating engines in nodejs.

populor templating engines:
pug, mustache, ejs ...

1- in cmd : npm i pug

2- in index.js :

	app.set('view engine', 'pug');
	app.set('views', './views'); //default

	app.get('/', (req,res) => {

		res.render('index', { title: 'My express app', message: 'Hello...' });

	})

3- create 'views' folder and create 'index.pug' file

4- in index.pug:

	html
		head
			title= title
		body
			h1= message
	

====================================================================================================================
--------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------- Express Router ------------


1- We create a 'routes' directory and inside that for each route create a js file. for example routes > courses.js

2- we put all of our created apis about that route to each file.

3- in courses.js instead of 'app; object (const app = express()) we work with 'route' object:

	const express  = require('express');
	
	const router = express.Router();

     ->	router.get('/', (req, res) => { ... });

	...
		
	module.exports = router;


4- we can factor out the route url. in index.js file:

	const app = express();
	
	const courses = require('/routes/courses');

	...
	
     ->	app.use('/api/courses', courses);
	
	...



=====================================================================================================================
---------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------













































